class SearchPage extends SearchDelegate<Etudiant> {
  List<Etudiant> listEtudiant;
  List<Etudiant> recentEtudiant;
  int indexEtudiants;
  bool found = false;
  String hintText;

  SearchPage({this.listEtudiant, this.recentEtudiant, this.hintText})
      : super(
          searchFieldLabel: hintText,
          keyboardType: TextInputType.text,
          textInputAction: TextInputAction.search,
        );

  @override
  List<Widget> buildActions(BuildContext context) {
    // TODO: implement buildActions
    return [
      IconButton(
        icon: Icon(
          Icons.clear,
        ),
        onPressed: () {
          query = '';
          showSuggestions(context);
        },
        tooltip: 'Annuler la recherche',
      ),
      IconButton(
        icon: Icon(Icons.delete),
        onPressed: () {
          recentEtudiant.clear();
        },
        tooltip: 'Supprimer les recherche recentes',
      )
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    // TODO: implement buildLeading
    return IconButton(
      icon: AnimatedIcon(
        icon: AnimatedIcons.menu_arrow,
        progress: transitionAnimation,
      ),
      onPressed: () {
        if (found == true) {
          showSuggestions(context);
        } else {
          close(context, null);
        }
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    // TODO: implement buildResults
    return PageEtudiants(etudiant: listEtudiant[indexEtudiants]);
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    // TODO: implement buildSuggestions changer la facon dont l

    found = false;
    List<Etudiant> suggestionList = query.isEmpty
        ? recentEtudiant
        : listEtudiant.where((p) => p._nomComplet.startsWith(query)).toList();

    return ListView.separated(
      separatorBuilder: (context, index) => Divider(),
      itemBuilder: (context, index) => ListTile(
        trailing: Icon(Icons.arrow_forward),
        leading: Icon(Icons.person),
        subtitle: Text('Id Search: ${suggestionList[index].idSearch}'),
        title: RichText(
          text: TextSpan(
              text:
                  suggestionList[index]._nomComplet.substring(0, query.length),
              style: TextStyle(
                //color: Colors.black,
                fontWeight: FontWeight.w200,
              ),
              children: [
                TextSpan(
                    text: suggestionList[index]
                        ._nomComplet
                        .substring(query.length),
                    style: TextStyle(
                      color: Colors.grey[600],
                    ))
              ]),
        ),
        onTap: () {
          int cpt = 0;
          for (int i = 0; i < recentEtudiant.length; i++) {
            if (suggestionList[index].idSearch == recentEtudiant[i].idSearch) {
              cpt++;
            }
          }
          if (cpt == 0) {
            recentEtudiant.add(suggestionList[index]);
          }
          indexEtudiants = suggestionList[index].idSearch;
          found = true;
          showResults(context);
        },
      ),
      itemCount: suggestionList.length,
      padding: EdgeInsets.all(2),
    );
  }

  @override
  ThemeData appBarTheme(BuildContext context) {
    // TODO: implement appBarTheme
    return ThemeData(
      brightness: Brightness.dark,
    );
  }
}
